// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_match_flow_mats
Rcpp::NumericMatrix rcpp_match_flow_mats(Rcpp::NumericMatrix flows, Rcpp::IntegerMatrix index0, Rcpp::IntegerMatrix index1, Rcpp::IntegerVector fcols, const int n);
RcppExport SEXP _nyped_rcpp_match_flow_mats(SEXP flowsSEXP, SEXP index0SEXP, SEXP index1SEXP, SEXP fcolsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type flows(flowsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type index0(index0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type index1(index1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type fcols(fcolsSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_match_flow_mats(flows, index0, index1, fcols, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nyped_rcpp_match_flow_mats", (DL_FUNC) &_nyped_rcpp_match_flow_mats, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_nyped(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
